// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	console "github.com/ChrisWiegman/kana/internal/console"
	docker "github.com/ChrisWiegman/kana/internal/docker"

	mock "github.com/stretchr/testify/mock"
)

// Cli is an autogenerated mock type for the Cli type
type Cli struct {
	mock.Mock
}

// WPCli provides a mock function with given fields: command, interactive, consoleOutput
func (_m *Cli) WPCli(command []string, interactive bool, consoleOutput *console.Console) (int64, string, error) {
	ret := _m.Called(command, interactive, consoleOutput)

	if len(ret) == 0 {
		panic("no return value specified for WPCli")
	}

	var r0 int64
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func([]string, bool, *console.Console) (int64, string, error)); ok {
		return rf(command, interactive, consoleOutput)
	}
	if rf, ok := ret.Get(0).(func([]string, bool, *console.Console) int64); ok {
		r0 = rf(command, interactive, consoleOutput)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func([]string, bool, *console.Console) string); ok {
		r1 = rf(command, interactive, consoleOutput)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func([]string, bool, *console.Console) error); ok {
		r2 = rf(command, interactive, consoleOutput)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WordPress provides a mock function with given fields: command, restart, root
func (_m *Cli) WordPress(command string, restart bool, root bool) (docker.ExecResult, error) {
	ret := _m.Called(command, restart, root)

	if len(ret) == 0 {
		panic("no return value specified for WordPress")
	}

	var r0 docker.ExecResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool, bool) (docker.ExecResult, error)); ok {
		return rf(command, restart, root)
	}
	if rf, ok := ret.Get(0).(func(string, bool, bool) docker.ExecResult); ok {
		r0 = rf(command, restart, root)
	} else {
		r0 = ret.Get(0).(docker.ExecResult)
	}

	if rf, ok := ret.Get(1).(func(string, bool, bool) error); ok {
		r1 = rf(command, restart, root)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCli creates a new instance of Cli. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCli(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cli {
	mock := &Cli{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
