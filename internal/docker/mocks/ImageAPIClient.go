// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	image "github.com/docker/docker/api/types/image"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ImageAPIClient is an autogenerated mock type for the ImageAPIClient type
type ImageAPIClient struct {
	mock.Mock
}

// ImageList provides a mock function with given fields: ctx, options
func (_m *ImageAPIClient) ImageList(ctx context.Context, options image.ListOptions) ([]image.Summary, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ImageList")
	}

	var r0 []image.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, image.ListOptions) ([]image.Summary, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, image.ListOptions) []image.Summary); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]image.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, image.ListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImagePull provides a mock function with given fields: ctx, ref, options
func (_m *ImageAPIClient) ImagePull(ctx context.Context, ref string, options image.PullOptions) (io.ReadCloser, error) {
	ret := _m.Called(ctx, ref, options)

	if len(ret) == 0 {
		panic("no return value specified for ImagePull")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, image.PullOptions) (io.ReadCloser, error)); ok {
		return rf(ctx, ref, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, image.PullOptions) io.ReadCloser); ok {
		r0 = rf(ctx, ref, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, image.PullOptions) error); ok {
		r1 = rf(ctx, ref, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImageRemove provides a mock function with given fields: ctx, _a1, options
func (_m *ImageAPIClient) ImageRemove(ctx context.Context, _a1 string, options image.RemoveOptions) ([]image.DeleteResponse, error) {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for ImageRemove")
	}

	var r0 []image.DeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, image.RemoveOptions) ([]image.DeleteResponse, error)); ok {
		return rf(ctx, _a1, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, image.RemoveOptions) []image.DeleteResponse); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]image.DeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, image.RemoveOptions) error); ok {
		r1 = rf(ctx, _a1, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewImageAPIClient creates a new instance of ImageAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImageAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImageAPIClient {
	mock := &ImageAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
